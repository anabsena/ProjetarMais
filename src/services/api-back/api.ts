/* tslint:disable */
/* eslint-disable */
/**
 * Cats example
 * The cats API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CategoryResponse
 */
export interface CategoryResponse {
    /**
     * Id da categoria
     * @type {string}
     * @memberof CategoryResponse
     */
    'id'?: string;
    /**
     * Nome da categoria
     * @type {string}
     * @memberof CategoryResponse
     */
    'name'?: string;
    /**
     * Nome da categoria
     * @type {string}
     * @memberof CategoryResponse
     */
    'description'?: string;
    /**
     * Projetos associados à categoria
     * @type {Array<ResponseProjectDto>}
     * @memberof CategoryResponse
     */
    'Project'?: Array<ResponseProjectDto>;
}
/**
 * 
 * @export
 * @interface CategorysResponse
 */
export interface CategorysResponse {
    /**
     * 
     * @type {Array<ResponseCategoryDto>}
     * @memberof CategorysResponse
     */
    'data': Array<ResponseCategoryDto>;
    /**
     * 
     * @type {PageInfo}
     * @memberof CategorysResponse
     */
    'pageInfo': PageInfo | null;
}
/**
 * 
 * @export
 * @interface CreateCategoryDto
 */
export interface CreateCategoryDto {
    /**
     * Nome da categoria
     * @type {string}
     * @memberof CreateCategoryDto
     */
    'name': string;
    /**
     * Descrição da categoria
     * @type {string}
     * @memberof CreateCategoryDto
     */
    'description': string;
}
/**
 * 
 * @export
 * @interface CreateProjectDto
 */
export interface CreateProjectDto {
    /**
     * Nome do projeto
     * @type {string}
     * @memberof CreateProjectDto
     */
    'name': string;
    /**
     * Descrição do projeto
     * @type {string}
     * @memberof CreateProjectDto
     */
    'description': string;
    /**
     * Detalhes do projeto
     * @type {string}
     * @memberof CreateProjectDto
     */
    'especificDetails': string;
    /**
     * id da categoria
     * @type {string}
     * @memberof CreateProjectDto
     */
    'projectCategoryId': string;
}
/**
 * 
 * @export
 * @interface CreateUserDto
 */
export interface CreateUserDto {
    /**
     * Admin
     * @type {string}
     * @memberof CreateUserDto
     */
    'name': string;
    /**
     * Password
     * @type {string}
     * @memberof CreateUserDto
     */
    'password': string;
    /**
     * Email
     * @type {string}
     * @memberof CreateUserDto
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface PageInfo
 */
export interface PageInfo {
    /**
     * 
     * @type {number}
     * @memberof PageInfo
     */
    'totalItems': number;
    /**
     * 
     * @type {number}
     * @memberof PageInfo
     */
    'totalPages': number;
    /**
     * 
     * @type {number}
     * @memberof PageInfo
     */
    'remainingPages': number;
    /**
     * 
     * @type {object}
     * @memberof PageInfo
     */
    'nextPage': object | null;
    /**
     * 
     * @type {object}
     * @memberof PageInfo
     */
    'prevPage': object | null;
}
/**
 * 
 * @export
 * @interface PhotoResponse
 */
export interface PhotoResponse {
    /**
     * Id da photo
     * @type {string}
     * @memberof PhotoResponse
     */
    'id'?: string;
    /**
     * id po projeto
     * @type {string}
     * @memberof PhotoResponse
     */
    'projectId'?: string;
    /**
     * 
     * @type {object}
     * @memberof PhotoResponse
     */
    'photos'?: object;
}
/**
 * 
 * @export
 * @interface PhotosResponse
 */
export interface PhotosResponse {
    /**
     * 
     * @type {Array<ResponsePhotoDto>}
     * @memberof PhotosResponse
     */
    'data': Array<ResponsePhotoDto>;
    /**
     * 
     * @type {PageInfo}
     * @memberof PhotosResponse
     */
    'pageInfo': PageInfo | null;
}
/**
 * 
 * @export
 * @interface ProjectResponse
 */
export interface ProjectResponse {
    /**
     * Id do projeto
     * @type {string}
     * @memberof ProjectResponse
     */
    'id'?: string;
    /**
     * Nome do projeto
     * @type {string}
     * @memberof ProjectResponse
     */
    'name'?: string;
    /**
     * Descrição do projeto
     * @type {string}
     * @memberof ProjectResponse
     */
    'description'?: string;
    /**
     * Detalhes do projeto
     * @type {string}
     * @memberof ProjectResponse
     */
    'especificDetails'?: string;
    /**
     * 
     * @type {Array<ResponsePhotoDto>}
     * @memberof ProjectResponse
     */
    'Photo'?: Array<ResponsePhotoDto>;
    /**
     * Categoria id
     * @type {string}
     * @memberof ProjectResponse
     */
    'projectCategoryId'?: string;
}
/**
 * 
 * @export
 * @interface ProjectsResponse
 */
export interface ProjectsResponse {
    /**
     * 
     * @type {Array<ResponseProjectDto>}
     * @memberof ProjectsResponse
     */
    'data': Array<ResponseProjectDto>;
    /**
     * 
     * @type {PageInfo}
     * @memberof ProjectsResponse
     */
    'pageInfo': PageInfo | null;
}
/**
 * 
 * @export
 * @interface ResponseCategoryDto
 */
export interface ResponseCategoryDto {
    /**
     * Id da categoria
     * @type {string}
     * @memberof ResponseCategoryDto
     */
    'id': string;
    /**
     * Nome da categoria
     * @type {string}
     * @memberof ResponseCategoryDto
     */
    'name': string;
    /**
     * Nome da categoria
     * @type {string}
     * @memberof ResponseCategoryDto
     */
    'description': string;
    /**
     * Projetos associados à categoria
     * @type {Array<ResponseProjectDto>}
     * @memberof ResponseCategoryDto
     */
    'Project': Array<ResponseProjectDto>;
}
/**
 * 
 * @export
 * @interface ResponsePhotoDto
 */
export interface ResponsePhotoDto {
    /**
     * Id da photo
     * @type {string}
     * @memberof ResponsePhotoDto
     */
    'id': string;
    /**
     * id po projeto
     * @type {string}
     * @memberof ResponsePhotoDto
     */
    'projectId': string;
    /**
     * 
     * @type {object}
     * @memberof ResponsePhotoDto
     */
    'photos': object;
}
/**
 * 
 * @export
 * @interface ResponseProjectDto
 */
export interface ResponseProjectDto {
    /**
     * Id do projeto
     * @type {string}
     * @memberof ResponseProjectDto
     */
    'id': string;
    /**
     * Nome do projeto
     * @type {string}
     * @memberof ResponseProjectDto
     */
    'name': string;
    /**
     * Descrição do projeto
     * @type {string}
     * @memberof ResponseProjectDto
     */
    'description': string;
    /**
     * Detalhes do projeto
     * @type {string}
     * @memberof ResponseProjectDto
     */
    'especificDetails': string;
    /**
     * 
     * @type {Array<ResponsePhotoDto>}
     * @memberof ResponseProjectDto
     */
    'Photo': Array<ResponsePhotoDto>;
    /**
     * Categoria id
     * @type {string}
     * @memberof ResponseProjectDto
     */
    'projectCategoryId': string;
}
/**
 * 
 * @export
 * @interface ResponseUserDto
 */
export interface ResponseUserDto {
    /**
     * Id do usuario
     * @type {string}
     * @memberof ResponseUserDto
     */
    'id': string;
    /**
     * Nome do admin
     * @type {string}
     * @memberof ResponseUserDto
     */
    'name': string;
    /**
     * Email
     * @type {string}
     * @memberof ResponseUserDto
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface UpdateCategoryDto
 */
export interface UpdateCategoryDto {
    /**
     * Nome da categoria
     * @type {string}
     * @memberof UpdateCategoryDto
     */
    'name'?: string;
    /**
     * Nome da categoria
     * @type {string}
     * @memberof UpdateCategoryDto
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface UpdatePhotoDto
 */
export interface UpdatePhotoDto {
    /**
     * Id do projeto
     * @type {string}
     * @memberof UpdatePhotoDto
     */
    'projectId'?: string;
    /**
     * foto
     * @type {object}
     * @memberof UpdatePhotoDto
     */
    'photos'?: object;
}
/**
 * 
 * @export
 * @interface UpdateProjectDto
 */
export interface UpdateProjectDto {
    /**
     * Nome do projeto
     * @type {string}
     * @memberof UpdateProjectDto
     */
    'name'?: string;
    /**
     * Descrição do projeto
     * @type {string}
     * @memberof UpdateProjectDto
     */
    'description'?: string;
    /**
     * Detalhes do projeto
     * @type {string}
     * @memberof UpdateProjectDto
     */
    'especificDetails'?: string;
}
/**
 * 
 * @export
 * @interface UpdateUserDto
 */
export interface UpdateUserDto {
    /**
     * Nome do admin
     * @type {string}
     * @memberof UpdateUserDto
     */
    'name': string;
    /**
     * Password
     * @type {string}
     * @memberof UpdateUserDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface UserResponse
 */
export interface UserResponse {
    /**
     * Id do usuario
     * @type {string}
     * @memberof UserResponse
     */
    'id'?: string;
    /**
     * Nome do admin
     * @type {string}
     * @memberof UserResponse
     */
    'name'?: string;
    /**
     * Email
     * @type {string}
     * @memberof UserResponse
     */
    'email'?: string;
}
/**
 * 
 * @export
 * @interface UsersResponse
 */
export interface UsersResponse {
    /**
     * 
     * @type {Array<ResponseUserDto>}
     * @memberof UsersResponse
     */
    'data': Array<ResponseUserDto>;
    /**
     * 
     * @type {PageInfo}
     * @memberof UsersResponse
     */
    'pageInfo': PageInfo | null;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Login
         * @param {string} email 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin: async (email: string, password: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('authControllerLogin', 'email', email)
            // verify required parameter 'password' is not null or undefined
            assertParamExists('authControllerLogin', 'password', password)
            const localVarPath = `/api/auth/v1/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Login
         * @param {string} email 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerLogin(email: string, password: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerLogin(email, password, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @summary Login
         * @param {string} email 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin(email: string, password: string, options?: any): AxiosPromise<object> {
            return localVarFp.authControllerLogin(email, password, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @summary Login
     * @param {string} email 
     * @param {string} password 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerLogin(email: string, password: string, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerLogin(email, password, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CategoryApi - axios parameter creator
 * @export
 */
export const CategoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new category
         * @param {CreateCategoryDto} createCategoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryControllerCreate: async (createCategoryDto: CreateCategoryDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createCategoryDto' is not null or undefined
            assertParamExists('categoryControllerCreate', 'createCategoryDto', createCategoryDto)
            const localVarPath = `/api/category/category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCategoryDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all categorys
         * @param {number} page 
         * @param {number} perPage 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryControllerFindAll: async (page: number, perPage: number, name?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('categoryControllerFindAll', 'page', page)
            // verify required parameter 'perPage' is not null or undefined
            assertParamExists('categoryControllerFindAll', 'perPage', perPage)
            const localVarPath = `/api/category/category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all categorys
         * @param {string} id category id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryControllerFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('categoryControllerFindOne', 'id', id)
            const localVarPath = `/api/category/category/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a category
         * @param {string} id category id
         * @param {UpdateCategoryDto} updateCategoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryControllerUpdate: async (id: string, updateCategoryDto: UpdateCategoryDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('categoryControllerUpdate', 'id', id)
            // verify required parameter 'updateCategoryDto' is not null or undefined
            assertParamExists('categoryControllerUpdate', 'updateCategoryDto', updateCategoryDto)
            const localVarPath = `/api/category/category/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCategoryDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoryApi - functional programming interface
 * @export
 */
export const CategoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new category
         * @param {CreateCategoryDto} createCategoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoryControllerCreate(createCategoryDto: CreateCategoryDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoryControllerCreate(createCategoryDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all categorys
         * @param {number} page 
         * @param {number} perPage 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoryControllerFindAll(page: number, perPage: number, name?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategorysResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoryControllerFindAll(page, perPage, name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all categorys
         * @param {string} id category id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoryControllerFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategorysResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoryControllerFindOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a category
         * @param {string} id category id
         * @param {UpdateCategoryDto} updateCategoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoryControllerUpdate(id: string, updateCategoryDto: UpdateCategoryDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoryControllerUpdate(id, updateCategoryDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CategoryApi - factory interface
 * @export
 */
export const CategoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoryApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new category
         * @param {CreateCategoryDto} createCategoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryControllerCreate(createCategoryDto: CreateCategoryDto, options?: any): AxiosPromise<CategoryResponse> {
            return localVarFp.categoryControllerCreate(createCategoryDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all categorys
         * @param {number} page 
         * @param {number} perPage 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryControllerFindAll(page: number, perPage: number, name?: string, options?: any): AxiosPromise<CategorysResponse> {
            return localVarFp.categoryControllerFindAll(page, perPage, name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all categorys
         * @param {string} id category id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryControllerFindOne(id: string, options?: any): AxiosPromise<CategorysResponse> {
            return localVarFp.categoryControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a category
         * @param {string} id category id
         * @param {UpdateCategoryDto} updateCategoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryControllerUpdate(id: string, updateCategoryDto: UpdateCategoryDto, options?: any): AxiosPromise<CategoryResponse> {
            return localVarFp.categoryControllerUpdate(id, updateCategoryDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CategoryApi - object-oriented interface
 * @export
 * @class CategoryApi
 * @extends {BaseAPI}
 */
export class CategoryApi extends BaseAPI {
    /**
     * 
     * @summary Create a new category
     * @param {CreateCategoryDto} createCategoryDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public categoryControllerCreate(createCategoryDto: CreateCategoryDto, options?: AxiosRequestConfig) {
        return CategoryApiFp(this.configuration).categoryControllerCreate(createCategoryDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all categorys
     * @param {number} page 
     * @param {number} perPage 
     * @param {string} [name] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public categoryControllerFindAll(page: number, perPage: number, name?: string, options?: AxiosRequestConfig) {
        return CategoryApiFp(this.configuration).categoryControllerFindAll(page, perPage, name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all categorys
     * @param {string} id category id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public categoryControllerFindOne(id: string, options?: AxiosRequestConfig) {
        return CategoryApiFp(this.configuration).categoryControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a category
     * @param {string} id category id
     * @param {UpdateCategoryDto} updateCategoryDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public categoryControllerUpdate(id: string, updateCategoryDto: UpdateCategoryDto, options?: AxiosRequestConfig) {
        return CategoryApiFp(this.configuration).categoryControllerUpdate(id, updateCategoryDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PhotoApi - axios parameter creator
 * @export
 */
export const PhotoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new photo
         * @param {string} [projectId] 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        photoControllerCreate: async (projectId?: string, file?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/photo/photo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (projectId !== undefined) { 
                localVarFormParams.append('projectId', projectId as any);
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all photo
         * @param {string} photos 
         * @param {number} page 
         * @param {number} perPage 
         * @param {any} [projectId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        photoControllerFindAll: async (photos: string, page: number, perPage: number, projectId?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'photos' is not null or undefined
            assertParamExists('photoControllerFindAll', 'photos', photos)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('photoControllerFindAll', 'page', page)
            // verify required parameter 'perPage' is not null or undefined
            assertParamExists('photoControllerFindAll', 'perPage', perPage)
            const localVarPath = `/api/photo/photo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (photos !== undefined) {
                localVarQueryParameter['photos'] = photos;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['projectId'] = projectId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all Photo
         * @param {string} id photo id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        photoControllerFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('photoControllerFindOne', 'id', id)
            const localVarPath = `/api/photo/photo/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a photo
         * @param {string} id Photo id
         * @param {UpdatePhotoDto} updatePhotoDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        photoControllerUpdate: async (id: string, updatePhotoDto: UpdatePhotoDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('photoControllerUpdate', 'id', id)
            // verify required parameter 'updatePhotoDto' is not null or undefined
            assertParamExists('photoControllerUpdate', 'updatePhotoDto', updatePhotoDto)
            const localVarPath = `/api/photo/photo/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updatePhotoDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PhotoApi - functional programming interface
 * @export
 */
export const PhotoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PhotoApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new photo
         * @param {string} [projectId] 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async photoControllerCreate(projectId?: string, file?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PhotoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.photoControllerCreate(projectId, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all photo
         * @param {string} photos 
         * @param {number} page 
         * @param {number} perPage 
         * @param {any} [projectId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async photoControllerFindAll(photos: string, page: number, perPage: number, projectId?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PhotoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.photoControllerFindAll(photos, page, perPage, projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all Photo
         * @param {string} id photo id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async photoControllerFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PhotosResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.photoControllerFindOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a photo
         * @param {string} id Photo id
         * @param {UpdatePhotoDto} updatePhotoDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async photoControllerUpdate(id: string, updatePhotoDto: UpdatePhotoDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PhotoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.photoControllerUpdate(id, updatePhotoDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PhotoApi - factory interface
 * @export
 */
export const PhotoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PhotoApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new photo
         * @param {string} [projectId] 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        photoControllerCreate(projectId?: string, file?: File, options?: any): AxiosPromise<PhotoResponse> {
            return localVarFp.photoControllerCreate(projectId, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all photo
         * @param {string} photos 
         * @param {number} page 
         * @param {number} perPage 
         * @param {any} [projectId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        photoControllerFindAll(photos: string, page: number, perPage: number, projectId?: any, options?: any): AxiosPromise<PhotoResponse> {
            return localVarFp.photoControllerFindAll(photos, page, perPage, projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all Photo
         * @param {string} id photo id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        photoControllerFindOne(id: string, options?: any): AxiosPromise<PhotosResponse> {
            return localVarFp.photoControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a photo
         * @param {string} id Photo id
         * @param {UpdatePhotoDto} updatePhotoDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        photoControllerUpdate(id: string, updatePhotoDto: UpdatePhotoDto, options?: any): AxiosPromise<PhotoResponse> {
            return localVarFp.photoControllerUpdate(id, updatePhotoDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PhotoApi - object-oriented interface
 * @export
 * @class PhotoApi
 * @extends {BaseAPI}
 */
export class PhotoApi extends BaseAPI {
    /**
     * 
     * @summary Create a new photo
     * @param {string} [projectId] 
     * @param {File} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhotoApi
     */
    public photoControllerCreate(projectId?: string, file?: File, options?: AxiosRequestConfig) {
        return PhotoApiFp(this.configuration).photoControllerCreate(projectId, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all photo
     * @param {string} photos 
     * @param {number} page 
     * @param {number} perPage 
     * @param {any} [projectId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhotoApi
     */
    public photoControllerFindAll(photos: string, page: number, perPage: number, projectId?: any, options?: AxiosRequestConfig) {
        return PhotoApiFp(this.configuration).photoControllerFindAll(photos, page, perPage, projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all Photo
     * @param {string} id photo id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhotoApi
     */
    public photoControllerFindOne(id: string, options?: AxiosRequestConfig) {
        return PhotoApiFp(this.configuration).photoControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a photo
     * @param {string} id Photo id
     * @param {UpdatePhotoDto} updatePhotoDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhotoApi
     */
    public photoControllerUpdate(id: string, updatePhotoDto: UpdatePhotoDto, options?: AxiosRequestConfig) {
        return PhotoApiFp(this.configuration).photoControllerUpdate(id, updatePhotoDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProjectApi - axios parameter creator
 * @export
 */
export const ProjectApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new project
         * @param {CreateProjectDto} createProjectDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectControllerCreate: async (createProjectDto: CreateProjectDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createProjectDto' is not null or undefined
            assertParamExists('projectControllerCreate', 'createProjectDto', createProjectDto)
            const localVarPath = `/api/project/project`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProjectDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all projects
         * @param {string} [name] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string} [description] 
         * @param {string} [especificDetails] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectControllerFindAll: async (name?: string, page?: number, perPage?: number, description?: string, especificDetails?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/project/project`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }

            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }

            if (especificDetails !== undefined) {
                localVarQueryParameter['especificDetails'] = especificDetails;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all projects
         * @param {string} id project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectControllerFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectControllerFindOne', 'id', id)
            const localVarPath = `/api/project/project/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a project
         * @param {string} id project id
         * @param {UpdateProjectDto} updateProjectDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectControllerUpdate: async (id: string, updateProjectDto: UpdateProjectDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectControllerUpdate', 'id', id)
            // verify required parameter 'updateProjectDto' is not null or undefined
            assertParamExists('projectControllerUpdate', 'updateProjectDto', updateProjectDto)
            const localVarPath = `/api/project/project/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProjectDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectApi - functional programming interface
 * @export
 */
export const ProjectApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new project
         * @param {CreateProjectDto} createProjectDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectControllerCreate(createProjectDto: CreateProjectDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectControllerCreate(createProjectDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all projects
         * @param {string} [name] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string} [description] 
         * @param {string} [especificDetails] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectControllerFindAll(name?: string, page?: number, perPage?: number, description?: string, especificDetails?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectControllerFindAll(name, page, perPage, description, especificDetails, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all projects
         * @param {string} id project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectControllerFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectControllerFindOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a project
         * @param {string} id project id
         * @param {UpdateProjectDto} updateProjectDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectControllerUpdate(id: string, updateProjectDto: UpdateProjectDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectControllerUpdate(id, updateProjectDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProjectApi - factory interface
 * @export
 */
export const ProjectApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new project
         * @param {CreateProjectDto} createProjectDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectControllerCreate(createProjectDto: CreateProjectDto, options?: any): AxiosPromise<ProjectResponse> {
            return localVarFp.projectControllerCreate(createProjectDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all projects
         * @param {string} [name] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string} [description] 
         * @param {string} [especificDetails] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectControllerFindAll(name?: string, page?: number, perPage?: number, description?: string, especificDetails?: string, options?: any): AxiosPromise<ProjectsResponse> {
            return localVarFp.projectControllerFindAll(name, page, perPage, description, especificDetails, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all projects
         * @param {string} id project id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectControllerFindOne(id: string, options?: any): AxiosPromise<ProjectsResponse> {
            return localVarFp.projectControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a project
         * @param {string} id project id
         * @param {UpdateProjectDto} updateProjectDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectControllerUpdate(id: string, updateProjectDto: UpdateProjectDto, options?: any): AxiosPromise<ProjectResponse> {
            return localVarFp.projectControllerUpdate(id, updateProjectDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjectApi - object-oriented interface
 * @export
 * @class ProjectApi
 * @extends {BaseAPI}
 */
export class ProjectApi extends BaseAPI {
    /**
     * 
     * @summary Create a new project
     * @param {CreateProjectDto} createProjectDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public projectControllerCreate(createProjectDto: CreateProjectDto, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).projectControllerCreate(createProjectDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all projects
     * @param {string} [name] 
     * @param {number} [page] 
     * @param {number} [perPage] 
     * @param {string} [description] 
     * @param {string} [especificDetails] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public projectControllerFindAll(name?: string, page?: number, perPage?: number, description?: string, especificDetails?: string, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).projectControllerFindAll(name, page, perPage, description, especificDetails, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all projects
     * @param {string} id project id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public projectControllerFindOne(id: string, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).projectControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a project
     * @param {string} id project id
     * @param {UpdateProjectDto} updateProjectDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public projectControllerUpdate(id: string, updateProjectDto: UpdateProjectDto, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).projectControllerUpdate(id, updateProjectDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new user
         * @param {CreateUserDto} createUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerCreate: async (createUserDto: CreateUserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUserDto' is not null or undefined
            assertParamExists('userControllerCreate', 'createUserDto', createUserDto)
            const localVarPath = `/api/user/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all users
         * @param {string} [name] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerFindAll: async (name?: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all users
         * @param {string} id user id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userControllerFindOne', 'id', id)
            const localVarPath = `/api/user/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a user
         * @param {string} id project id
         * @param {UpdateUserDto} updateUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerUpdate: async (id: string, updateUserDto: UpdateUserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userControllerUpdate', 'id', id)
            // verify required parameter 'updateUserDto' is not null or undefined
            assertParamExists('userControllerUpdate', 'updateUserDto', updateUserDto)
            const localVarPath = `/api/user/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new user
         * @param {CreateUserDto} createUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerCreate(createUserDto: CreateUserDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerCreate(createUserDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all users
         * @param {string} [name] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerFindAll(name?: string, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerFindAll(name, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all users
         * @param {string} id user id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerFindOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a user
         * @param {string} id project id
         * @param {UpdateUserDto} updateUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerUpdate(id: string, updateUserDto: UpdateUserDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerUpdate(id, updateUserDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new user
         * @param {CreateUserDto} createUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerCreate(createUserDto: CreateUserDto, options?: any): AxiosPromise<UserResponse> {
            return localVarFp.userControllerCreate(createUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all users
         * @param {string} [name] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerFindAll(name?: string, page?: number, perPage?: number, options?: any): AxiosPromise<UsersResponse> {
            return localVarFp.userControllerFindAll(name, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all users
         * @param {string} id user id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerFindOne(id: string, options?: any): AxiosPromise<UsersResponse> {
            return localVarFp.userControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a user
         * @param {string} id project id
         * @param {UpdateUserDto} updateUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerUpdate(id: string, updateUserDto: UpdateUserDto, options?: any): AxiosPromise<UserResponse> {
            return localVarFp.userControllerUpdate(id, updateUserDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @summary Create a new user
     * @param {CreateUserDto} createUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userControllerCreate(createUserDto: CreateUserDto, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).userControllerCreate(createUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all users
     * @param {string} [name] 
     * @param {number} [page] 
     * @param {number} [perPage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userControllerFindAll(name?: string, page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).userControllerFindAll(name, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all users
     * @param {string} id user id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userControllerFindOne(id: string, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).userControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a user
     * @param {string} id project id
     * @param {UpdateUserDto} updateUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userControllerUpdate(id: string, updateUserDto: UpdateUserDto, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).userControllerUpdate(id, updateUserDto, options).then((request) => request(this.axios, this.basePath));
    }
}



